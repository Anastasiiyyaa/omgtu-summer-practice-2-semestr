#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №7.Реализация потока обработки команад.

**Цель:** Реализовать основу для многопоточного сервера приложений.

**Результаты:** После выполнения работы Вы сможете:
1. Обрабатывать множество операций в несколько потоков.
2. Останавливать потоки по запросу извне.

## Задание.
Пусть операция задана интерфейсом

#!csharp

using System.Collections.Concurrent;
using System.Threading;

public interface ICommand
{
    void Execute();
}

public class HardStopCommand : ICommand
{
    public void Execute()
    {
        Console.WriteLine("Выполняется HardStop");
        throw new ThreadInterruptedException();
    }
}

public class SoftStopCommand : ICommand
{
    public void Execute()
    {
        Console.WriteLine("Выполняется SoftStop");
    }
}

public class ServerThread
{
    private ConcurrentQueue<ICommand> commands = new ConcurrentQueue<ICommand>();
    private Thread thread;
    private bool isRunning = false;

    public ServerThread()
    {
        thread = new Thread(Run);
        thread.Start();
    }

    public void EnqueueCommand(ICommand command)
    {
        commands.Enqueue(command);
    }

    public void HardStop()
    {
        if (Thread.CurrentThread == thread)
        {
            EnqueueCommand(new HardStopCommand());
        }
        else
        {
            throw new InvalidOperationException("HardStop может быть вызван только в текущем потоке");
        }
    }

    public void SoftStop()
    {
        if (Thread.CurrentThread == thread)
        {
            EnqueueCommand(new SoftStopCommand());
        }
        else
        {
            throw new InvalidOperationException("SoftStop может быть вызван только в текущем потоке");
        }
    }

    private void Run()
    {
        isRunning = true;
        try
        {
            while (isRunning)
            {
                if (commands.TryDequeue(out ICommand command))
                {
                    try
                    {
                        command.Execute();
                    }
                    catch (ThreadInterruptedException)
                    {
                        Console.WriteLine("Поток завершен");
                        isRunning = false;
                        break;
                    }
                }
                else
                {
                    Thread.Sleep(100); 
                }
            }
        }
        finally
        {
            isRunning = false;
        }   
    }
    public Thread GetThread() => thread;
}

public class PrintCommand : ICommand
{
    public void Execute()
    {
        Console.WriteLine("Команда выполнена");
    }
}

var serverThread = new ServerThread();
serverThread.EnqueueCommand(new PrintCommand());
serverThread.EnqueueCommand(new PrintCommand());
serverThread.EnqueueCommand(new SoftStopCommand());
serverThread.EnqueueCommand(new PrintCommand());
serverThread.EnqueueCommand(new HardStopCommand());
serverThread.EnqueueCommand(new PrintCommand());

serverThread.GetThread().Join();

#!markdown

Классы, наследующие интерйес ICommand будем называть **Командами.**

Реализовать класс ServerThread и команды по hard и soft завершению потока. 

ServerThread может менять свое поведение для обработки следующей Команды.
Исключение, выброшенное из Команды, перехватывается и передается вместе с самой Командой в ExceptionHandler (см. ЛР №5) Примечание. Наличие реализованного обработчика исключений не обязательно для выполнения данной задачи. 

Команда HardStop приводит к немедленной остановке потока, несмотря на, что в очереди потока есть еще Команды.
Команда  SoftStop останавливает поток, когда в очереди потока закончатся все Команды.

Команды HardStop и SoftStop успешно выполняются только в потоке, который они должны остановить, в противном случае выбрасывают исключение.
Отсутствие Команд в очереди потока не должно требовать значительных затрат процессорного времени. Значительными считаются затраты, которые зависят от времени простоя потока.

Написать проверку, которая гарантирует правильное выполнение команд HardStop и SoftStop.
