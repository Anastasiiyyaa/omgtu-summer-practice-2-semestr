#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №8. Реализация планировщика команд.

**Цель:** Реализация длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Сделать возможным в потоке выполнять длительные операции.

## Задание.
Пусть, в условиях практической работы №7, у нас есть поток с очередью, который в цикле извлекает команды из очереди и выполняет их.

Некоторые из команд не могут выполнить всю работу за один вызов метода Execute без блокирования на длительное время выполнения всех остальных командд из очереди.

Например, если какая-нибудь сетевая игра представлена командой, то пока одна игра не закончится, следующая не начнется. Чтобы эффективнее использовать процессорные
можности, нужно обеспечить возхможность поиграть как можно большему количеству игроков.

Для этого используют режим псевдопараллельной обработки. Когда все время работы разбивают на небольшие отрезки, каждый из которых выполняется
за один вызов метода Execute. Чтобы выполнить всю работу, нужно вызвать метод Execute несколько раз, до тех пор пока работа не будет завершена.
Это позволяет между вызовами Execute одного экземплыра команды вызывать метод Execute других команд.

Так устроен, например, ренедринг страницы в браузере. Только в браузеоре это используется не для рендеренга всех вкладок, а для обработки 
реакций пользователя на странице.

В прошлой работе все команды, которые выполнялись в потоке, брались из очереди. Поэтому первая идея - это положить долгоиграющую операцию обратно в очередь.
Но это может привести к состоянию мертвой блокировки потока: если очередь будет полна, то поток, который попытается сделать запись, будет заблокирован до тех пор, 
пока в очереди не появится свободное место. Поэтому нельзя в одном и том же потоке читать и писать в очередь неблокируемым образом.

Чтобы избежать мертвой блокировки потока, необходимо ввести понятие Планировщика, который будет отвечать за выбор следующей длительной задачи для выполнения,
а чтение из очереди оставить только для новых операций. 

#!csharp

using System.Collections.Concurrent;
using System.Threading;

public interface ICommand
{
    void Execute();
    int Count { get; set; }
}

public class HardStopCommand : ICommand
{
    public int Count { get; set; } = 1;

    public void Execute()
    {
        Console.WriteLine("Выполняется HardStop");
        throw new ThreadInterruptedException();
    }
}

public class SoftStopCommand : ICommand
{
    public int Count { get; set; } = 1;

    public void Execute()
    {
        Console.WriteLine("Выполняется SoftStop");
    }
}
public interface IScheduler
{
    bool HasCommand()
    ICommand Select();
    void Add(ICommand cmd);
}
public class RoundRobinScheduler : IScheduler
{
    private ConcurrentQueue<ICommand> commands = new ConcurrentQueue<ICommand>();

    public bool HasCommand()
    {
        return !commands.IsEmpty;
    }

    public ICommand Select()
    {
        if (commands.TryDequeue(out ICommand command))
        {
            return command;
        }
        return null;
    }

    public void Add(ICommand cmd)
    {
        commands.Enqueue(cmd);
    }
}
public class ServerThread
{
    private ConcurrentQueue<ICommand> newCommands = new ConcurrentQueue<ICommand>();
    private IScheduler scheduler = new RoundRobinScheduler();
    private Thread thread;
    private bool isRunning = false;

    public ServerThread()
    {
        thread = new Thread(Run);
        thread.Start();
    }

    public void EnqueueCommand(ICommand command)
    {
        newCommands.Enqueue(command);
    }
    public void HardStop()
    {
        if (Thread.CurrentThread == thread)
        {
            EnqueueCommand(new HardStopCommand());
        }
        else
        {
            throw new InvalidOperationException("HardStop может быть вызван только в текущем потоке");
        }
    }

    public void SoftStop()
    {
        if (Thread.CurrentThread == thread)
        {
            EnqueueCommand(new SoftStopCommand());
        }
        else
        {
            throw new InvalidOperationException("SoftStop может быть вызван только в текущем потоке");
        }
    }
    private void Run()
{
    isRunning = true;
    try
    {
        while (isRunning)
        {
            if (newCommands.TryDequeue(out ICommand command))
            {
                scheduler.Add(command);
            }

            while (scheduler.HasCommand())
            {
                try
                {
                    command = scheduler.Select();
                    if (command != null)
                    {
                        command.Execute();
                        command.Count--;
                        if (command.Count > 0)
                        {
                            scheduler.Add(command);
                        }
                    }
                    else
                    {
                        Thread.Sleep(10);
                        break;
                    }
                }
                catch (ThreadInterruptedException)
                {
                    Console.WriteLine("Поток завершен");
                    isRunning = false;
                    break;
                }
            }
        }
    }
    finally
    {
        isRunning = false;
    }   
}
    public Thread GetThread() => thread;
}

public class PrintCommand : ICommand
{
    public int Count { get; set; } = 1;

    public void Execute()
    {
        Console.WriteLine("Команда выполнена");
    }
}

public class LongCommand : ICommand
{
    public int Count { get; set; } = 5;

    public void Execute()
    {
        Console.WriteLine($"Выполняется долгоиграющая команда, осталось выполнений:  {Count-1}");
    }
}

var serverThread = new ServerThread();
serverThread.EnqueueCommand(new PrintCommand { Count = 1 });
serverThread.EnqueueCommand(new SoftStopCommand());
serverThread.EnqueueCommand(new LongCommand  { Count = 5 });
serverThread.EnqueueCommand(new HardStopCommand());
serverThread.EnqueueCommand(new PrintCommand { Count = 1 });

serverThread.GetThread().Join();


#!markdown

Необходимо реализовать поток, который способен реализоввывать длительные операции.

**Указание.** 
1. В практической работе №7 из очереди команды извлекались блокируеммым образом с помощью метода Take(), при наличии планировщика так делать нельзя: поток
может заснуть несмотря на наличие команд в планировщике до тех пор, пока не будет записана новая команда в очередь.

С другой стороны, если будем всегда читать неблокируемым образом, а в планировщике нет никакой работы, то будем тратить процессорное время без полезной нагрузки.

Необходимо учесть этот момент при реализации очереди.

2. Для обепечения справедливости стратегии планировщика в слабом смысле использовать стратегию Round Robbin (циклическую) для определения следующего потока на исполнение.
